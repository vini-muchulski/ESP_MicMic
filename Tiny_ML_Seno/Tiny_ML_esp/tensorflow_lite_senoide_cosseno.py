# -*- coding: utf-8 -*-
"""TensorFlow Lite senoide cosseno

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P04Y_SuE5WJt-iWP2ABhQsZY0l9DEhyo
"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras import layers, callbacks

# 1. Dados
angles = np.random.uniform(-np.pi, np.pi, (1000,1))
sines  = np.sin(angles)

# 2. Modelo mais profundo
model = keras.Sequential([
    layers.Dense(50, activation='tanh', input_shape=(1,)),  # primeira camada oculta
    layers.Dense(50, activation='tanh'),                    # segunda camada oculta
    layers.Dense(1)                                         # saída linear
])

# 3. Compilação (com learning rate menor para maior estabilidade)
optimizer = keras.optimizers.Adam(learning_rate=0.01)
model.compile(optimizer=optimizer, loss='mean_squared_error')

# 4. Callback de early stopping para interromper quando não melhorar
early_stop = callbacks.EarlyStopping(
    monitor='loss',    # pode usar 'val_loss' se tiver validação
    patience=30,
    restore_best_weights=True
)

# 5. Treinamento
history = model.fit(
    angles, sines,
    epochs=600,
    batch_size=32,
    verbose=0,
    callbacks=[early_stop]
)

# 6. Avaliação visual
x_vals = np.linspace(-np.pi, np.pi, 1000).reshape(-1,1)
y_true = np.sin(x_vals)
y_pred = model.predict(x_vals)

plt.figure(figsize=(8,4))
plt.plot(x_vals, y_true, label='Seno real')
plt.plot(x_vals, y_pred, '--', label='Previsão melhorada')
plt.legend()
plt.title("Comparação: seno real vs previsão da rede aprimorada")
plt.xlabel("Ângulo (rad)")
plt.ylabel("Seno")
plt.grid(True)
plt.show()

import tensorflow as tf

# Converte sem quantização
converter = tf.lite.TFLiteConverter.from_keras_model(model)
# garante que NÃO haja otimizações
converter.optimizations = []
tflite_model = converter.convert()

# Grava no disco
with open('modelo_seno_float32.tflite', 'wb') as f:
    f.write(tflite_model)

"""# teste"""

import numpy as np

# valor que você quer prever
x = np.array([[np.pi/6]])   # shape = (1,1)

# faz a predição
y_pred = model.predict(x)

print(f"Previsão para π/6 ≈ {y_pred[0,0]}")

model.predict(np.array([[np.pi/6]]))

model.predict(np.array([[np.pi/2]]))

model.predict(np.array([[np.pi]]))

"""# modelo cosseno"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow import keras
from tensorflow.keras import layers, callbacks

# 1. Dados
angles = np.random.uniform(-np.pi, np.pi, (1000,1))
cossenos  = np.cos(angles)

# 2. Modelo mais profundo
model = keras.Sequential([
    layers.Dense(50, activation='tanh', input_shape=(1,)),  # primeira camada oculta
    layers.Dense(50, activation='tanh'),                    # segunda camada oculta
    layers.Dense(1)                                         # saída linear
])

# 3. Compilação (com learning rate menor para maior estabilidade)
optimizer = keras.optimizers.Adam(learning_rate=0.01)
model.compile(optimizer=optimizer, loss='mean_squared_error')

# 4. Callback de early stopping para interromper quando não melhorar
early_stop = callbacks.EarlyStopping(
    monitor='loss',    # pode usar 'val_loss' se tiver validação
    patience=20,       # espera até 20 épocas sem melhora
    restore_best_weights=True
)

# 5. Treinamento
history = model.fit(
    angles, cossenos,
    epochs=500,
    batch_size=32,
    verbose=0,
    callbacks=[early_stop]
)

# 6. Avaliação visual
x_vals = np.linspace(-np.pi, np.pi, 500).reshape(-1,1)
y_true = np.cos(x_vals)
y_pred = model.predict(x_vals)

plt.figure(figsize=(8,4))
plt.plot(x_vals, y_true, label='COSSENO real')
plt.plot(x_vals, y_pred, '--', label='Previsão melhorada')
plt.legend()
plt.title("Comparação: COSSENO real vs previsão da rede aprimorada")
plt.xlabel("Ângulo (rad)")
plt.ylabel("COSSENO")
plt.grid(True)
plt.show()

model.predict(np.array([[np.pi]]))

model.predict(np.array([[np.pi/2]]))

model.predict(np.array([[np.pi/3]]))

# Salvar no ambiente do Colab
tflite_model_path = 'modelo_COSSENO.tflite'
with open(tflite_model_path, 'wb') as f:
    f.write(converted)

# Para fazer o download automático no Colab
from google.colab import files
files.download(tflite_model_path)